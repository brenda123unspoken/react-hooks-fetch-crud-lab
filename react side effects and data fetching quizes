Side Effects and Data Fetching Quiz
Due No due date Points 9 Questions 9 Time limit None Allowed attempts 3
This quiz is no longer available as the course has been concluded.
Attempt history
Attempt	Time	Score
KEPT	Attempt 2	19 minutes	8.47 out of 9
LATEST	Attempt 2	19 minutes	8.47 out of 9
Attempt 1	4,538 minutes	6.27 out of 9
 Answers will be shown after your last attempt
Score for this attempt: 8.47 out of 9
Submitted 11 Jun 2024 at 10:42
This attempt took 19 minutes.
 
Question 1
1 / 1 pts
When called with only one argument, useEffect will run our side effect function every time the component renders.
  True 
Right! When we call the useEffect hook and don't provide a dependencies array, it will run the side effect function on every render. For example, the side effect function in this useEffect call would run on every render:

function App() {
  useEffect(() => {
    console.log("render");
  });

  return <h1>hello!h1>;
}
  False 
Source/s:

The useEffect Hook
 
PartialQuestion 2
0.8 / 1 pts
Each of the descriptions below applies to a particular React hook or function. Choose the correct option for each from the dropdown.
Is used to update the state of a component. 
The useEffect hook
Allows us to run code that isn't triggered by a user event. 
The useEffect hook
By default, is run automatically each time the component re-renders. 
The useEffect hook
Causes a component to re-render when called. 
A setState function
Is used to set the initial state of a component. 
The useState hook
Source/s:

The useEffect Hook
React State
 
Question 3
1 / 1 pts
Natasha is building a Twitter clone, and is trying to fetch some data from the Twitter API when her App component loads. What is the best approach to doing this?
  Using the useEffect hook to fetch all the tweets she initially needs.
Correct! The useEffect hook is a great tool for this feature, since we can use the useEffect hook to fetch data only when the component first loads.
  Making the user click a button and handling the fetch request in the click event handler.
  I don't know.
  Making the fetch request directly in the body of the component function. 
Source/s:

Data Fetching in React
 
Question 4
1 / 1 pts
Natasha now wants her users to be able to update their profiles in her Twitter clone. A user should be able to update their profile by filling out and submitting a form. She'll then need to take the data from the form and send it to her backend by making a PATCH request.

Should she handle this action with the useEffect hook, or by attaching an event listener?

  useEffect, because she needs the data immediately when the page loads.
  I don't know.
  Event listener , because she only wants the fetch to fire when the user is done updating their profile.
Correct! The useEffect hook is only helpful for running code as a side-effect of the component rendering. In the case of this feature, Natasha doesn't need to wait for the component to re-render in order to run the code to make the PATCHrequest, so using useEffect is not necessary. She can simply make the request when the submit event is triggered for the form.
Source/s:

Data Fetching in React
 
Question 5
1 / 1 pts
When we're using the useEffect hook, React gives us a way to control when the side effect function will run. What is it?
  By calling the useEffect inside an if/else statement.
  I don't know.
  By running a cleanup function in a useEffect callback function.
  By passing a second argument to useEffect of a dependencies array.
Correct! By passing a dependencies array to the useEffect hook, React can determine whether or not it is necessary to call the side effect function based on whether the variables in that dependencies array have changed from one render to the next.
Source/s:

The useEffect Hook
 
Question 6
1 / 1 pts
This code will successfully update our component's state after receiving the response from our request.

function TweetList() {
  const [tweets, setTweets] = useState([]);

  useEffect(() => {
    fetch("https://api.twitter.com/1.1/search/tweets.json")
      .then((r) => r.json())
      .then((data) => {
        setTweets(data.tweets);
      });
  }, []);

  // return JSX...
}
  True 
Correct! This is a common approach to fetching data from an API and setting that data in state when a component loads. Check out theReact AJAX exampleLinks to an external site. for more on this pattern.
  False 
Source/s:

Data Fetching in React
 
Question 7
1 / 1 pts
What will happen when the following code runs?

function DogImages() {
  const [dogImages, setDogImages] = useState([]);

  useEffect(() => {
    fetch("https://dog.ceo/api/breeds/image/random/3")
      .then((r) => r.json())
      .then((data) => {
        // setting state in the useEffect callback
        setDogImages(data.messages);
      });
  });

  // return JSX...
}
  I don't know.
  Our component will re-render once after calling setDogImages and theuseEffectcallback won't run again.
  Running this code will result in an endless loop of fetch requests. 
Right! By default, the useEffect hook will run our side effect after every render, unless we provide a dependencies array as a second argument. Since calling setDogImages will trigger a re-render of our component, this will result in an endless loop of fetching and setting state.
Source/s:

Data Fetching in React
 
Question 8
1 / 1 pts
When and why should we use a cleanup function with useEffect?
  Always, just to be safe. 
  If we have a long running function that we want to stop running when our component is no longer the page.
Spot on! The reason React provides us with the ability to clean up after our side effect functions is to avoid memory leaks, and prevent unneeded code from running in the background.
  Any time we make a network request with fetch.
  I don't know.
Source/s:

The useEffect Hook - Cleaning Up
 
PartialQuestion 9
0.67 / 1 pts
Which of the following would be good use-cases for the useEffect hook?
  Handle a form being submitted 
  Subscribe to a chat service when a component loads 
  I don't know.
  Start or stop a timer based on changes to state 
  Fetch some data from an API when a component loads 
Source/s:

The useEffect Hook
Quiz score: 8.47 out of 9
Last attempt details:
